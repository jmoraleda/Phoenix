jobs:
- job: Windows_CI
  timeoutInMinutes: 90
  displayName: 'Windows CI'
  pool:
    vmImage: 'windows-2022'
  strategy:
    matrix:
      Py311_x86:
        python.version: '3.11'
        python.arch: x86
        addToPath: true
      Py312_x86:
        python.version: '3.12'
        python.arch: x86
        addToPath: true

      Py311_x64:
        python.version: '3.11'
        python.arch: x64
        addToPath: true
      Py312_x64:
        python.version: '3.12'
        python.arch: x64
        addToPath: true


  variables: {'PYTHONUNBUFFERED': '1'}

  steps:
  - checkout: self
    submodules: recursive

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: '$(python.arch)'

  - bash: |
      which python
      python -c "import sys; print(sys.version); print(sys.prefix)"
      # check what Pythons are available
      ls -al /c/hostedtoolcache/windows/Python
    displayName: 'Check Python'

  - bash: |
      curl -O https://bootstrap.pypa.io/get-pip.py
      python get-pip.py
      python -m pip install -U setuptools wheel
      python -m pip install --prefer-binary -r requirements.txt
    displayName: 'Install Python dependencies'

  - bash: |
      rm C:/Program\ Files/Microsoft\ Visual\ Studio/2022/Enterprise/VC/Auxiliary/Build/Microsoft.VCToolsVersion.v143.default.*
    displayName: 'Remove extra MSVC version'

  - task: BatchScript@1
    displayName: 'Set up vcvarsall'
    inputs:
      filename: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat'
      arguments: $(python.arch)
      modifyEnvironment: true

  - bash: |
      python build.py --jobs=4 build_wx
    displayName: 'build wxWidgets'

  - bash: |
      python build.py dox etg --nodoc sip
    displayName: 'generate code'

  - bash: |
      python build.py --jobs=4 build_py
    displayName: 'build wxPython'

  - bash: |
      python build.py bdist_wheel
      python -m pip install dist/wxPythonMeticy-*.whl
      python -c "import wx; print(f'Successfully tested importing wx version {wx.version()}');"
    displayName: 'build wheel and test install'

  - task: TwineAuthenticate@1
    inputs:
      artifactFeed: wxPythonMeticy/release_artifacts
    displayName: 'Twine Authenticate'

  - script: |
      python -m twine upload -r release_artifacts --config-file $(PYPIRC_PATH) dist/*
    displayName: 'Upload to feed'
